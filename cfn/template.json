{

  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Builds a jenkins ci stack",

  "Parameters" : {

    "DomainName": {
      "Type": "String"
    },
    "ExecutionRole": {
      "Type": "String"
    },
    "ImageId" : {
      "Type" : "String"
    },
    "InstanceProfile" : {
      "Type" : "String"
    },
    "InstanceType" : {
      "Type" : "String"
    },
    "KeyName" : {
      "Type" : "String"
    },
    "SubnetId" : {
      "Type" : "String"
    },
    "VpcId" : {
      "Type" : "String"
    }

  },

  "Resources" : {

    "Ec2Sg" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ "jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" }, "ec2-sg" ] ] },
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "Ec2SgIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "Ec2Sg" },
        "IpProtocol" : "tcp",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : { "Ref" : "Ec2Sg" }
      }
    },

    "ElbSg" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : { "Fn::Join" : [ "", [ "jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" }, "elb-sg" ] ] },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "CreateCertFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
      "Code": {
        "ZipFile":  { "Fn::Join": ["\n", [
        "import boto3",
        "import hashlib",
        "import logging",
        "import time",
        "import cfnresponse",
        "log = logging.getLogger()",
        "log.setLevel(logging.DEBUG)",
        "from botocore.exceptions import ClientError",
        "acm = boto3.client( 'acm' )",
        "def wait_for_validation( domain, context ):",
        "  while context.get_remaining_time_in_millis() > 10000:",
        "    time.sleep(5)",
        "    response = acm.list_certificates( CertificateStatuses=[ 'ISSUED' ] )",
        "    if any( cert['DomainName'] == domain for cert in response[ 'CertificateSummaryList' ] ):",
        "        return",
        "    log.info( 'waiting for cert validation' )",
        "  log.warning( 'timed out waiting for cert validation' )",
        "def handler( event, context ):",
        "  responseData = {}",
        "  if event[ 'RequestType' ] == 'Create': ",
        "    domain_name = event[ 'ResourceProperties' ][ 'DomainName' ]",
        "    id_token = hashlib.md5('cfn-{StackId}-{LogicalResourceId}'.format(**event)).hexdigest()",
        "    kwargs = { 'DomainName': domain_name, 'IdempotencyToken': id_token[:30] }",
        "    response = acm.request_certificate(**kwargs)",
        "    responseData[ 'Data' ] = response['CertificateArn']",
        "    wait_for_validation( domain_name, context )",
        "    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData, response['CertificateArn'] )",
        "  elif event[ 'RequestType' ] == 'Delete': ",
        "    try:",
        "      response = acm.delete_certificate( CertificateArn=event[ 'PhysicalResourceId' ] )",
        "    except:",
        "      log.exception( 'Failure deleting cert' )",
        "      cfnresponse.send( event, context, cfnresponse.FAILED, responseData, event[ 'PhysicalResourceId' ] )",
        "    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData, event[ 'PhysicalResourceId' ] )",
        "  elif event[ 'RequestType' ] == 'Update': ",
        "    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData, event[ 'PhysicalResourceId' ] )"
        ]]}
      },
      "Handler": "index.handler",
      "Runtime": "python2.7",
      "Timeout": "300",
      "Role": { "Ref" : "ExecutionRole" }
      }
    },

    "Cert": {
      "Type": "Custom::Cert",
      "Properties": {
        "DomainName": { "Fn::Join" : [ "", [ "jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" } ] ] },
        "ServiceToken": { "Fn::GetAtt" : [ "CreateCertFunction", "Arn" ] }
      }
    },

    "Elb" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "ConnectionSettings" : { "IdleTimeout" : "3600" },
        "HealthCheck" : {
          "Target" : "TCP:22",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "20",
          "Timeout" : "10"
        },
        "Listeners" : [ 
          { "LoadBalancerPort" : "22", "InstancePort" : "22", "Protocol" : "TCP" },
          { "LoadBalancerPort" : "443", "InstancePort" : "8080", "Protocol" : "HTTPS", "SSLCertificateId" : { "Ref" : "Cert" } }
        ],
        "Scheme" : "internet-facing",
        "SecurityGroups" : [ { "Ref" : "ElbSg" }, { "Ref" : "Ec2Sg" } ],
        "Subnets" : [ { "Ref" : "SubnetId" } ]
      }
    },

    "Cname" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [ { "Ref" : "DomainName" }, "." ] ] },
        "Comment" : "cname",
        "Name" : { "Fn::Join" : [ "", [ "jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" }, "." ] ] },
        "Type" : "CNAME",
        "TTL" : "60",
        "SetIdentifier" :  { "Fn::Join" : [ "", [ "jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" }, "elb-cname" ] ] },
        "Weight" : "4",
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "Elb", "DNSName" ] } ]
      }
    },

    "LC" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "BlockDeviceMappings" : [ { "DeviceName" : "/dev/sda1", "Ebs" : { "VolumeSize" : "40" } } ],
        "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
        "ImageId" : { "Ref" : "ImageId" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "Ec2Sg" } ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "", [
              "#!/bin/bash \n",
              "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
              "yum install -y ansible git pwgen zip \n",
              "[ -f /root/.ssh/id_rsa ] || ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa \n",
              "cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \n",
              "[ -f /root/.admin_pass ] || touch /root/.admin_pass && chmod 400 /root/.admin_pass && pwgen 12 1 > /root/.admin_pass \n",
              "cd /opt \n",
              "git clone https://github.com/jmuenster/jenkins-stack.git \n",
              "cd jenkins-stack/ansible \n",
              "ansible-galaxy install geerlingguy.jenkins -p ./roles/ \n",
              "ansible-playbook -c local config.yml --extra-vars \"admin_password=$( cat /root/.admin_pass )\" \n",
              "/opt/aws/bin/cfn-signal --stack ", { "Ref": "AWS::StackName" }, " --resource Asg --region ", { "Ref": "AWS::Region" }, " -s true \n"
            ] ]
          }
        }
      }
    },

    "Asg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "DesiredCapacity" : "1",
        "LaunchConfigurationName" : { "Ref" : "LC" },
        "LoadBalancerNames" : [ { "Ref" : "Elb" } ],
        "MinSize" : "1",
        "MaxSize" : "1",
        "VPCZoneIdentifier" : [ { "Ref" : "SubnetId" } ]
      },
      "CreationPolicy" : { "ResourceSignal" : { "Count" : "1" , "Timeout" : "PT60M" } }
    }


  },

  "Outputs" : {

    "Ssh" : {
      "Description" : "Url",
      "Value" : { "Fn::Join" : [ "", [ "ssh -i ~/.ssh/", { "Ref" : "KeyName" }, ".pem ec2-user@jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" } ] ] }
    },
    "Url" : {
      "Description" : "Url",
      "Value" : { "Fn::Join" : [ "", [ "https://jenkins-", { "Ref" : "AWS::StackName" }, ".", { "Ref" : "DomainName" } ] ] }
    }

  }

}
