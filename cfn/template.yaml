AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  ReqCert:
    Fn::Equals:
    - Ref: ReqCert
    - 'Yes'
Description: multi-az jenkins template
Mappings:
  ImageIdMap:
    us-east-1:
      ImageId: ami-2051294a
    us-west-1:
      ImageId: ami-d1315fb1
    us-west-2:
      ImageId: ami-775e4f16
Outputs:
  Ssh:
    Description: ssh
    Value:
      Fn::Join:
      - ''
      - - ssh -i ~/.ssh/
        - Ref: KeyName
        - .pem ec2-user@
        - Ref: ARecord
  Url:
    Description: url
    Value:
      Fn::Join:
      - ''
      - - Fn::If:
          - ReqCert
          - https://
          - http://
        - Ref: ARecord
Parameters:
  CidrBlockPrefix:
    Default: 10.10.10
    Description: First three octets in the vpc cidr block range (x.y.z.0)
    Type: String
  DomainName:
    Description: Must be a valid hosted zone
    Type: String
  ElbSgCidrRange:
    Default: 0.0.0.0/0
    Description: Cidr block range used for ingress rules on the ELB security group
    Type: String
  InstanceType:
    Default: t2.micro
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  ReqCert:
    AllowedValues:
    - 'Yes'
    - 'No'
    Default: 'No'
    Description: Select yes to create an ACM certificate (you must have access to
      an email address registered with the domain)
    Type: String
Resources:
  ARecord:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - Elb
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - Elb
          - CanonicalHostedZoneNameID
      Comment: a record
      HostedZoneName:
        Fn::Join:
        - ''
        - - Ref: DomainName
          - .
      Name:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - .
          - Ref: DomainName
          - .
      Type: A
    Type: AWS::Route53::RecordSet
  Asg:
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT20M
    DependsOn:
    - MountTarget1
    - MountTarget2
    - MountTarget3
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName:
        Ref: LC
      LoadBalancerNames:
      - Ref: Elb
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier:
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet1Id
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet2Id
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet3Id
    Type: AWS::AutoScaling::AutoScalingGroup
  AsgRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: cloudformation:*
            Effect: Allow
            Resource: '*'
          - Action: ec2:*
            Effect: Allow
            Resource: '*'
          - Action: dynamodb:*
            Effect: Allow
            Resource: '*'
          - Action: iam:*
            Effect: Allow
            Resource: '*'
          - Action: kinesis:*
            Effect: Allow
            Resource: '*'
          - Action: kms:*
            Effect: Allow
            Resource: '*'
          - Action: lambda:*
            Effect: Allow
            Resource: '*'
          - Action: s3:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - .
            - Ref: DomainName
            - -policy
    Type: AWS::IAM::Role
  Cert:
    Condition: ReqCert
    Properties:
      DomainName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - .
          - Ref: DomainName
      ServiceToken:
        Fn::GetAtt:
        - CreateCertFunction
        - Arn
    Type: Custom::Cert
  CreateCertFunction:
    Condition: ReqCert
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - '

            '
          - - import boto3
            - import hashlib
            - import logging
            - import time
            - import cfnresponse
            - log = logging.getLogger()
            - log.setLevel(logging.DEBUG)
            - from botocore.exceptions import ClientError
            - acm = boto3.client( 'acm' )
            - 'def wait_for_validation( domain, context ):'
            - '  while context.get_remaining_time_in_millis() > 10000:'
            - '    time.sleep(5)'
            - '    response = acm.list_certificates( CertificateStatuses=[ ''ISSUED''
              ] )'
            - '    if any( cert[''DomainName''] == domain for cert in response[ ''CertificateSummaryList''
              ] ):'
            - '        return'
            - '    log.info( ''waiting for cert validation'' )'
            - '  log.warning( ''timed out waiting for cert validation'' )'
            - 'def handler( event, context ):'
            - '  responseData = {}'
            - '  if event[ ''RequestType'' ] == ''Create'': '
            - '    domain_name = event[ ''ResourceProperties'' ][ ''DomainName'' ]'
            - '    id_token = hashlib.md5(''cfn-{StackId}-{LogicalResourceId}''.format(**event)).hexdigest()'
            - '    kwargs = { ''DomainName'': domain_name, ''IdempotencyToken'': id_token[:30]
              }'
            - '    response = acm.request_certificate(**kwargs)'
            - '    responseData[ ''Data'' ] = response[''CertificateArn'']'
            - '    wait_for_validation( domain_name, context )'
            - '    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData,
              response[''CertificateArn''] )'
            - '  elif event[ ''RequestType'' ] == ''Delete'': '
            - '    try:'
            - '      response = acm.delete_certificate( CertificateArn=event[ ''PhysicalResourceId''
              ] )'
            - '    except:'
            - '      log.exception( ''Failure deleting cert'' )'
            - '      cfnresponse.send( event, context, cfnresponse.FAILED, responseData,
              event[ ''PhysicalResourceId'' ] )'
            - '    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData,
              event[ ''PhysicalResourceId'' ] )'
            - '  elif event[ ''RequestType'' ] == ''Update'': '
            - '    cfnresponse.send( event, context, cfnresponse.SUCCESS, responseData,
              event[ ''PhysicalResourceId'' ] )'
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
    Type: AWS::Lambda::Function
  Ec2Sg:
    Properties:
      GroupDescription:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - .
          - Ref: DomainName
          - -ec2-sg
      VpcId:
        Fn::GetAtt:
        - NetworkStack
        - Outputs.VpcId
    Type: AWS::EC2::SecurityGroup
  Ec2SgIngress:
    Properties:
      FromPort: '0'
      GroupId:
        Ref: Ec2Sg
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: Ec2Sg
      ToPort: '65535'
    Type: AWS::EC2::SecurityGroupIngress
  Efs:
    Properties:
      FileSystemTags:
      - Key: Name
        Value: TestFileSystem
    Type: AWS::EFS::FileSystem
  Elb:
    Properties:
      ConnectionSettings:
        IdleTimeout: '3600'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '20'
        Target: TCP:22
        Timeout: '10'
        UnhealthyThreshold: '10'
      Listeners:
      - InstancePort: '22'
        LoadBalancerPort: '22'
        Protocol: TCP
      - InstancePort: '8080'
        LoadBalancerPort:
          Fn::If:
          - ReqCert
          - '443'
          - '80'
        Protocol:
          Fn::If:
          - ReqCert
          - HTTPS
          - HTTP
        SSLCertificateId:
          Fn::If:
          - ReqCert
          - Ref: Cert
          - Ref: AWS::NoValue
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ElbSg
      - Ref: Ec2Sg
      Subnets:
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PublicSubnet1Id
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PublicSubnet2Id
      - Fn::GetAtt:
        - NetworkStack
        - Outputs.PublicSubnet3Id
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  ElbSg:
    Properties:
      GroupDescription:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - .
          - Ref: DomainName
          - -elb-sg
      SecurityGroupIngress:
      - CidrIp:
          Ref: ElbSgCidrRange
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp:
          Ref: ElbSgCidrRange
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp:
          Ref: ElbSgCidrRange
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      VpcId:
        Fn::GetAtt:
        - NetworkStack
        - Outputs.VpcId
    Type: AWS::EC2::SecurityGroup
  IamInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: AsgRole
    Type: AWS::IAM::InstanceProfile
  LC:
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: '40'
      IamInstanceProfile:
        Ref: IamInstanceProfile
      ImageId:
        Fn::FindInMap:
        - ImageIdMap
        - Ref: AWS::Region
        - ImageId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: Ec2Sg
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe \n"
            - "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\
              \ \n"
            - "yum install -y ansible git pwgen zip nfs-utils gcc python-devel \n"
            - "yum -y update \n"
            - "[ -f /root/.ssh/id_rsa ] || ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa\
              \ \n"
            - "cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \n"
            - "cd /opt && git clone https://github.com/jmuenster/jenkins-stack.git\
              \ \n"
            - echo "$( curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone
              ).
            - Ref: Efs
            - .efs.
            - Ref: AWS::Region
            - ".amazonaws.com:/ /var/lib/jenkins nfs4 nfsvers=4.1 0 0\" >> /etc/fstab\
              \ \n"
            - "mkdir /var/lib/jenkins && mount /var/lib/jenkins \n"
            - "[ -f /var/lib/jenkins/.admin_pass ] || ( touch /var/lib/jenkins/.admin_pass\
              \ && chmod 400 /var/lib/jenkins/.admin_pass && pwgen 12 1 > /var/lib/jenkins/.admin_pass\
              \ ) \n"
            - "#[ -d /efs/jenkins ] && ln -s /efs/jenkins /var/lib/jenkins || ( mkdir\
              \ /efs/jenkins && ln -s /efs/jenkins /var/lib/jenkins ) \n"
            - "ansible-galaxy install geerlingguy.jenkins -p /opt/jenkins-stack/ansible/roles/\
              \ \n"
            - "# manually cloning repos into roles dir to test jenkins_home commit\
              \ \n"
            - "#git clone https://github.com/jmuenster/ansible-role-jenkins.git /opt/jenkins-stack/ansible/roles/geerlingguy.jenkins\
              \ \n"
            - "#git clone https://github.com/geerlingguy/ansible-role-java.git /opt/jenkins-stack/ansible/roles/geerlingguy.java\
              \ \n"
            - "ansible-playbook -v -c local /opt/jenkins-stack/ansible/config.yml\
              \ --extra-vars \"admin_password=$( cat /var/lib/jenkins/.admin_pass\
              \ )\" \n"
            - '/opt/aws/bin/cfn-signal --stack '
            - Ref: AWS::StackName
            - ' --resource Asg --region '
            - Ref: AWS::Region
            - " -s true \n"
    Type: AWS::AutoScaling::LaunchConfiguration
  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: acm:*
            Effect: Allow
            Resource: '*'
          - Action: logs:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - .
            - Ref: DomainName
            - -policy
    Type: AWS::IAM::Role
  MountTarget1:
    Properties:
      FileSystemId:
        Ref: Efs
      SecurityGroups:
      - Ref: Ec2Sg
      SubnetId:
        Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet1Id
    Type: AWS::EFS::MountTarget
  MountTarget2:
    Properties:
      FileSystemId:
        Ref: Efs
      SecurityGroups:
      - Ref: Ec2Sg
      SubnetId:
        Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet2Id
    Type: AWS::EFS::MountTarget
  MountTarget3:
    Properties:
      FileSystemId:
        Ref: Efs
      SecurityGroups:
      - Ref: Ec2Sg
      SubnetId:
        Fn::GetAtt:
        - NetworkStack
        - Outputs.PrivateSubnet3Id
    Type: AWS::EFS::MountTarget
  NetworkStack:
    Properties:
      Parameters:
        CidrBlockPrefix:
          Ref: CidrBlockPrefix
      TemplateURL: https://s3-us-west-2.amazonaws.com/jmuenster-public-templates/vpc-stack/template.json
      TimeoutInMinutes: '60'
    Type: AWS::CloudFormation::Stack
