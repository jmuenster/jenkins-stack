AWSTemplateFormatVersion: '2010-09-09'
Description: multi-az jenkins template
Mappings:
  ImageIdMap:
    us-east-1:
      ImageId: ami-2051294a
    us-west-1:
      ImageId: ami-d1315fb1
    us-west-2:
      ImageId: ami-775e4f16
Outputs:
  Ssh:
    Description: ssh command
    Value: { "Fn::Sub": "ssh -i ~/.ssh/${KeyName}.pem ec2-user@${ARecord}" }
  Url:
    Description: jenkins url
    Value: { "Fn::Sub": "https://${ARecord}" }
Parameters:
  CertificateArn:
    Default: arn:aws:acm:us-west-2:235970082445:certificate/aa3822d0-04be-43d1-825c-7b45c3e28e79
    Description: Arn of the certificate manager cert that can be used for this instance
    Type: String
  DomainName:
    Default: thepreferrednomenclature.com
    Description: Must be a valid hosted zone
    Type: String
  ElbSgCidrRange:
    Default: 0.0.0.0/0
    Description: Cidr block range used for ingress rules on the ELB security group
    Type: String
  InstanceType:
    Default: t2.micro
    Description: Instance type to be used for the jenkins instance
    Type: String
  KeyName:
    Default: josh-jackburton
    Description: Ssh key used to access the jenkins instance
    Type: AWS::EC2::KeyPair::KeyName
  VolumeSize:
    Default: 40
    Description: Storage (in gb) to allocate to the jenkins instance
    MinValue: 10
    MaxValue: 1024
    Type: Number
  VpcStackName:
    Default: jackburton-16-vpc
    Description: Name of the vpc stack that will host the jenkins instance
    Type: String
Resources:
  ARecord:
    Properties:
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - Elb
          - DNSName
        HostedZoneId:
          Fn::GetAtt:
          - Elb
          - CanonicalHostedZoneNameID
      Comment: a record for jenkins instance
      HostedZoneName: { "Fn::Sub": "${DomainName}." }
      Name: { "Fn::Sub": "${AWS::StackName}.${DomainName}." }
      Type: A
    Type: AWS::Route53::RecordSet
  Asg:
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT20M
    DependsOn:
    - MountTarget1
    - MountTarget2
    - MountTarget3
    Properties:
      DesiredCapacity: '1'
      LaunchConfigurationName: !Ref LC
      LoadBalancerNames:
      - !Ref Elb
      MaxSize: '1'
      MinSize: '1'
      VPCZoneIdentifier:
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet1Id" } }
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet2Id" } }
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet3Id" } }
    Type: AWS::AutoScaling::AutoScalingGroup
  AsgRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: cloudformation:*
            Effect: Allow
            Resource: '*'
          - Action: logs:*
            Effect: Allow
            Resource: '*'
          - Action: ec2:*
            Effect: Allow
            Resource: '*'
          - Action: dynamodb:*
            Effect: Allow
            Resource: '*'
          - Action: iam:*
            Effect: Allow
            Resource: '*'
          - Action: kinesis:*
            Effect: Allow
            Resource: '*'
          - Action: kms:*
            Effect: Allow
            Resource: '*'
          - Action: lambda:*
            Effect: Allow
            Resource: '*'
          - Action: s3:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: { "Fn::Sub": "${AWS::StackName}.${DomainName}-policy" }
    Type: AWS::IAM::Role
  Ec2Sg:
    Properties:
      GroupDescription: { "Fn::Sub": "${AWS::StackName}.${DomainName}-ec2-sg" }
      VpcId: { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-VpcId" } }
    Type: AWS::EC2::SecurityGroup
  Ec2SgIngress:
    Properties:
      FromPort: '0'
      GroupId: !Ref Ec2Sg
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref Ec2Sg
      ToPort: '65535'
    Type: AWS::EC2::SecurityGroupIngress
  Efs:
    Properties:
      FileSystemTags:
      - Key: Name
        Value: TestFileSystem
    Type: AWS::EFS::FileSystem
  Elb:
    Properties:
      ConnectionSettings:
        IdleTimeout: '3600'
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '20'
        Target: TCP:22
        Timeout: '10'
        UnhealthyThreshold: '10'
      Listeners:
      - InstancePort: '22'
        InstanceProtocol: TCP
        LoadBalancerPort: '22'
        Protocol: TCP
      - InstancePort: '8080'
        InstanceProtocol: HTTP
        LoadBalancerPort: '443'
        Protocol: HTTPS
        SSLCertificateId: !Ref CertificateArn
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ElbSg
      - !Ref Ec2Sg
      Subnets:
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PublicSubnet1Id" } }
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PublicSubnet2Id" } }
      - { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PublicSubnet3Id" } }
    Type: AWS::ElasticLoadBalancing::LoadBalancer
  ElbSg:
    Properties:
      GroupDescription: { "Fn::Sub": "${AWS::StackName}.${DomainName}-elb-sg" }
      SecurityGroupIngress:
      - CidrIp: !Ref ElbSgCidrRange
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: !Ref ElbSgCidrRange
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      VpcId: { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-VpcId" } }
    Type: AWS::EC2::SecurityGroup
  IamInstanceProfile:
    Properties:
      Path: /
      Roles:
      - !Ref AsgRole
    Type: AWS::IAM::InstanceProfile
  LC:
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: !Ref VolumeSize
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId:
        Fn::FindInMap:
        - ImageIdMap
        - !Ref AWS::Region
        - ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref Ec2Sg
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            yum install -y python-setuptools
            mkdir /opt/aws-cfn-bootstrap-latest
            curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C /opt/aws-cfn-bootstrap-latest --strip-components 1
            easy_install /opt/aws-cfn-bootstrap-latest
            bail () { /usr/bin/cfn-signal --region ${AWS::Region} --stack ${AWS::StackName} --resource Asg -s false; exit 1; }
            trap bail ERR
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install -y ansible git pwgen zip nfs-utils gcc python-devel nodejs
            yum -y update
            [ -f /root/.ssh/id_rsa ] || ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa
            cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys
            cd /opt && git clone https://github.com/jmuenster/jenkins-stack.git
            echo "$( curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone ).${Efs}.efs.${AWS::Region}.amazonaws.com:/ /var/lib/jenkins nfs4 nfsvers=4.1 0 0" >> /etc/fstab
            mkdir /var/lib/jenkins && mount /var/lib/jenkins
            [ -f /var/lib/jenkins/.admin_pass ] || ( touch /var/lib/jenkins/.admin_pass && chmod 400 /var/lib/jenkins/.admin_pass && pwgen 12 1 > /var/lib/jenkins/.admin_pass )
            ansible-galaxy install geerlingguy.jenkins -p /opt/jenkins-stack/ansible/roles/
            ansible-playbook -v -c local /opt/jenkins-stack/ansible/config.yml --extra-vars "admin_password=$( cat /var/lib/jenkins/.admin_pass ) jenkins_version=1.651.3"
            npm install -g serverless
            /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --resource Asg --region ${AWS::Region} -s true
    Type: AWS::AutoScaling::LaunchConfiguration
  MountTarget1:
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref Ec2Sg
      SubnetId: { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet1Id" } }
    Type: AWS::EFS::MountTarget
  MountTarget2:
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref Ec2Sg
      SubnetId: { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet2Id" } }
    Type: AWS::EFS::MountTarget
  MountTarget3:
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref Ec2Sg
      SubnetId: { "Fn::ImportValue" : { "Fn::Sub" : "${VpcStackName}-PrivateSubnet3Id" } }
    Type: AWS::EFS::MountTarget
